<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>PowerShell on Daniel Brennand</title><link>https://dbren.uk/tags/powershell/</link><description>Recent content in PowerShell on Daniel Brennand</description><generator>Hugo -- 0.146.7</generator><language>en</language><lastBuildDate>Thu, 22 Dec 2022 23:39:10 +0100</lastBuildDate><atom:link href="https://dbren.uk/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell: Storing Credentials Securely</title><link>https://dbren.uk/blog/powershell-storing-credentials/</link><pubDate>Thu, 22 Dec 2022 23:39:10 +0100</pubDate><guid>https://dbren.uk/blog/powershell-storing-credentials/</guid><description>&lt;p>Recently I&amp;rsquo;ve been working on several PowerShell scripts that require credentials to access REST APIs. In this blog post, I will showcase two approaches for storing credentials securely for use in PowerShell scripts.&lt;/p>
&lt;h1 id="encrypted-password-file-">Encrypted Password File 🔒&lt;/h1>
&lt;p>The encrypted password file leverages the &lt;a href="https://learn.microsoft.com/en-us/previous-versions/ms995355(v=msdn.10)">Windows Data Protection API (DPAPI)&lt;/a> to encrypt the password as a &lt;code>System.Security.SecureString&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>$Credentials = Get-Credential
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$Credentials.Password
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>System.Security.SecureString
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$Credentials.Password | ConvertFrom-SecureString
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>01000000d08c9ddf0115d1118c7a00c04fc297eb01000000f5ab85d7ee9da048ae4ae797ee7eaf0a000000000200000000001066000000010000200000008c4a03d2f0731e0e7661d695fda8b441eaff31e75724931f31374a0c8292b636000000000e800000000200002000000028da885828bd627480178382ce9a1b477819e7703546ce41819d37f4e63d33ba20000000ab2c4401635ec24db9f20071e18dea0b79ce16ba38b5503ec9937b7fbc849dcf40000000155053a793c210998ef7317b0161e7344c2174b904b527c0cf24e7bbf2243b99e936df3ab67bc9e285a1be33aed37c7604fb07f5d0c44ceb7d6334ca30b0a610
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default DPAPI uses the current user context to generate an encryption key. This encryption key is then used to encrypt the &lt;code>PSCredential.Password&lt;/code> property as a &lt;code>System.Security.SecureString&lt;/code> (as shown above). It is possible to provide your own encryption key, but I won&amp;rsquo;t be covering that in this post. If you want to read more on this, check out &lt;!-- raw HTML omitted -->Travis Gan&amp;rsquo;s blog &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->.&lt;/p></description></item><item><title>Using Git Hooks to lint PowerShell</title><link>https://dbren.uk/blog/git-hook-powershell/</link><pubDate>Sun, 24 Apr 2022 15:55:08 +0100</pubDate><guid>https://dbren.uk/blog/git-hook-powershell/</guid><description>&lt;p>Hi there! 👋&lt;/p>
&lt;p>Recently I discovered &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git Hooks&lt;/a>. Git Hooks provide a way of running custom scripts when a certain git action occurs. In this post, I want to share a pre-commit Git Hook I&amp;rsquo;ve written to lint PowerShell code using the &lt;a href="https://github.com/PowerShell/PSScriptAnalyzer">PSScriptAnalyzer&lt;/a> module.&lt;/p>
&lt;h1 id="what-is-a-linter-">What is a Linter? 🕵️‍♂️&lt;/h1>
&lt;p>A linter analyses code to identify common errors, bugs and stylistic issues. Their aim is to improve code quality. Linters perform static analysis meaning they check code without executing it. Some well known linters for other languages include ESLint and Pylint.&lt;/p></description></item></channel></rss>